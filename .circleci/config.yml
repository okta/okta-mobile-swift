version: 2.1

orbs:
  general-platform-helpers: okta/general-platform-helpers@1.8

executors:
  apple-ci-arm-medium:
    macos:
      xcode: 15.0
    resource_class: macos.m1.medium.gen1

commands:
  ui-test:
    parameters:
      scheme:
        type: string
      sdk:
        type: string
        default: iphonesimulator
      destination:
        type: string
        default: "platform=iOS Simulator,OS=17.0.1,name=iPhone 15 Pro Max"
    steps:
      - run:
          name: "Test <<parameters.scheme>>"
          environment:
            NSUnbufferedIO: YES
          command: |
            set -o pipefail && xcodebuild \
                -derivedDataPath ~/Build/DerivedData \
                -clonedSourcePackagesDirPath ~/Build/ClonedSources \
                -resultBundlePath "~/TestResults/<<parameters.scheme>>.xcresult" \
                -workspace OktaMobileSDK.xcworkspace \
                -scheme "<<parameters.scheme>>" \
                -sdk <<parameters.sdk>> \
                -destination "<<parameters.destination>>" \
                test 2>&1

jobs:
  setup:
    executor: apple-ci-arm-medium
    steps:
      - checkout
      - run:
          name: "Store configuration files"
          command: |
            printenv TEST_OKTA_PLIST | base64 -d -i - > ~/project/Samples/Shared/Okta.plist
            printenv TEST_CONFIGURATION | base64 -d -i - > ~/project/Samples/Shared/TestConfiguration.xcconfig
      - persist_to_workspace:
          root: ~/project
          paths:
            - .

  test-websignin-ios:
    executor: apple-ci-arm-medium
    steps:
      - attach_workspace:
          at: ~/project
      - ui-test:
          scheme: "WebSignIn (iOS)"
      - ui-test:
          scheme: "SingleSignOn (iOS)"

  test-directauth-ios:
    executor: apple-ci-arm-medium
    steps:
      - attach_workspace:
          at: ~/project
      - ui-test:
          scheme: "DirectAuthSignIn (iOS)"

  test-deviceauthsignin-ios:
    executor: apple-ci-arm-medium
    steps:
      - attach_workspace:
          at: ~/project
      - ui-test:
          scheme: "DeviceAuthSignIn (iOS)"

  test-deviceauthsignin-tvos:
    executor: apple-ci-arm-medium
    steps:
      - attach_workspace:
          at: ~/project
      - ui-test:
          scheme: "DeviceAuthSignIn (tvOS)"
          sdk: appletvsimulator
          destination: "platform=tvOS Simulator,OS=16.4,name=Apple TV"

  test-userpasswordsignin-macos:
    executor: apple-ci-arm-medium
    steps:
      - attach_workspace:
          at: ~/project
      - ui-test:
          scheme: "UserPasswordSignIn (macOS)"
          sdk: macosx
          destination: "platform:macOS, name:Any Mac"

  test-classicnativeauth-ios:
    executor: apple-ci-arm-medium
    steps:
      - attach_workspace:
          at: ~/project
      - ui-test:
          scheme: "ClassicNativeAuth (iOS)"

  snyk-scan:
    executor: apple-ci-arm-medium
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Install rosetta # Needed for snyk to work on M1 machines.
          command: softwareupdate --install-rosetta --agree-to-license
      - run:
          name: run swift package show dependencies
          command: swift package show-dependencies
      - general-platform-helpers/step-load-dependencies
      - general-platform-helpers/step-run-snyk-monitor:
          scan-all-projects: true
          skip-unresolved: false
          os: macos

workflows:
  ui-tests:
    jobs:
      - setup
      - test-websignin-ios:
          requires:
            - setup
      - test-directauth-ios:
          requires:
            - setup
      - test-deviceauthsignin-ios:
          requires:
            - setup
      - test-deviceauthsignin-tvos:
          requires:
            - setup
      - test-userpasswordsignin-macos:
          requires:
            - setup
      - test-classicnativeauth-ios:
          requires:
            - setup

  semgrep:
    jobs:
      - general-platform-helpers/job-semgrep-prepare:
          name: semgrep-prepare
      - general-platform-helpers/job-semgrep-scan:
          name: semgrep-scan
          requires:
            - semgrep-prepare

  security-scan:
    jobs:
      - setup:
          filters:
            branches:
              only:
                - master
      - general-platform-helpers/job-snyk-prepare:
          name: prepare-snyk
          requires:
            - setup
      - snyk-scan:
          name: execute-snyk
          requires:
            - prepare-snyk

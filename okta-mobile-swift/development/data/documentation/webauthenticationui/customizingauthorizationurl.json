{
  "abstract" : [
    {
      "text" : "Features and APIs to enable customization of the authorization URL.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/WebAuthenticationUI\/documentation\/WebAuthenticationUI"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/WebAuthenticationUI\/documentation\/WebAuthenticationUI\/CustomizingAuthorizationURL"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "WebAuthenticationUI"
      }
    ],
    "role" : "article",
    "roleHeading" : "Article",
    "title" : "Customizing the Authorization URL"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "Overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Many times the URL presented to the user within a browser may need to be customized. For example, a custom query string argument needs to be appended to the URL, such as ",
              "type" : "text"
            },
            {
              "code" : "idp",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "login_hint",
              "type" : "codeVoice"
            },
            {
              "text" : ", or other parameters. These may be used by the Sign In Widget to determine how to present the UI to your user. Alternatively, other advanced use-cases may require more complex configuration of the URL.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Since this URL is typically generated at runtime, APIs are needed to give you the capability to configure this URL.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "signIn-and-signOut-Options",
          "level" : 2,
          "text" : "signIn and signOut Options",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The simplest approach to customizing your authorization URL is by specifying options when invoking the ",
              "type" : "text"
            },
            {
              "code" : "WebAuthentication\/signIn(from:options:)",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "WebAuthentication\/signOut(from:credential:options:)",
              "type" : "codeVoice"
            },
            {
              "text" : " functions. These options are defined in the ",
              "type" : "text"
            },
            {
              "code" : "WebAuthentication\/Option",
              "type" : "codeVoice"
            },
            {
              "text" : " enumeration, and gives you control over the behavior of the sign-in experience within the browser.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let auth = WebAuthentication(issuer: issuer,",
            "                             clientId: clientId,",
            "                             scopes: \"openid profile offline_access\",",
            "                             redirectUri: redirectUri)",
            "let token = try await auth.signIn(from: view.window,",
            "                                  options: [",
            "                                      .login(hint: \"user@example.com\"),",
            "                                      .prompt(.login),",
            "                                  ])"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Query-String-Parameters",
          "level" : 2,
          "text" : "Query String Parameters",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Another approach to customizing your authorization URL is through adding additional parameters to the query string. These values can be supplied to the initializer through the ",
              "type" : "text"
            },
            {
              "code" : "WebAuthentication\/init(issuer:clientId:scopes:redirectUri:logoutRedirectUri:additionalParameters:)",
              "type" : "codeVoice"
            },
            {
              "text" : " initializer or through the ",
              "type" : "text"
            },
            {
              "code" : "Okta.plist",
              "type" : "codeVoice"
            },
            {
              "text" : " configuration format (see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/WebAuthenticationUI\/documentation\/WebAuthenticationUI\/ConfiguringYourClient",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " for more information), or by when invoking the ",
              "type" : "text"
            },
            {
              "code" : "WebAuthentication\/signIn(from:options:)",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "WebAuthentication\/signOut(from:credential:options:)",
              "type" : "codeVoice"
            },
            {
              "text" : " functions.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "When passing values to the initializer, you can supply raw string key\/value pairs.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let auth = WebAuthentication(issuer: issuer,",
            "                             clientId: clientId,",
            "                             scopes: \"openid profile offline_access\",",
            "                             redirectUri: redirectUri,",
            "                             additionalParameters: [ \"idp\": myIdpString ])",
            "let token = try await auth.signIn()"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Customizing-the-Authorization-URL-through-Delegation",
          "level" : 2,
          "text" : "Customizing the Authorization URL through Delegation",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/WebAuthenticationUI\/documentation\/WebAuthenticationUI\/WebAuthentication",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " class exposes the underlying OAuth2 flow through the ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/WebAuthenticationUI\/documentation\/WebAuthenticationUI\/WebAuthentication\/signInFlow",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " property. The authentication flows, defined within the OktaOAuth2 SDK, all support a multicast delegate mechanism to notify other parts of the SDK as well as your application of important events.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If your code conforms to the ",
              "type" : "text"
            },
            {
              "code" : "AuthorizationCodeFlowDelegate",
              "type" : "codeVoice"
            },
            {
              "text" : " protocol, and implements the ",
              "type" : "text"
            },
            {
              "code" : "authentication(flow:customizeUrl:)",
              "type" : "codeVoice"
            },
            {
              "text" : " method, you can alter the URL before it is loaded in the browser.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let auth = try WebAuthentication()",
            "auth.signInFlow.add(delegate: self)",
            "",
            "let token = try await auth.signIn()"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Elsewhere in your code, in the class that conforms to ",
              "type" : "text"
            },
            {
              "code" : "AuthorizationCodeFlowDelegate",
              "type" : "codeVoice"
            },
            {
              "text" : ", you can implement the appropriate methods to customize the URL:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func authentication<Flow: AuthorizationCodeFlow>(",
            "    flow: Flow,",
            "    customizeUrl urlComponents: inout URLComponents)",
            "{",
            "    urlComponents.queryItems?.append(URLQueryItem(name: \"idp\", value: myIdpString))",
            "    urlComponents.fragment = \"recover\"",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/webauthenticationui\/customizingauthorizationurl"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://WebAuthenticationUI/documentation/WebAuthenticationUI": {
  "abstract" : [
    {
      "text" : "Make it easy to enable users to sign in to your app through browser-based sign on.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/WebAuthenticationUI\/documentation\/WebAuthenticationUI",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "WebAuthenticationUI",
  "type" : "topic",
  "url" : "\/documentation\/webauthenticationui"
},
"doc://WebAuthenticationUI/documentation/WebAuthenticationUI/ConfiguringYourClient": {
  "abstract" : [
    {
      "text" : "Configure your WebAuthentication client to connect to your OAuth2 application.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/WebAuthenticationUI\/documentation\/WebAuthenticationUI\/ConfiguringYourClient",
  "kind" : "article",
  "role" : "article",
  "title" : "Configuring Your Client",
  "type" : "topic",
  "url" : "\/documentation\/webauthenticationui\/configuringyourclient"
},
"doc://WebAuthenticationUI/documentation/WebAuthenticationUI/WebAuthentication": {
  "abstract" : [
    {
      "text" : "Authentication coordinator that simplifies signing users in using browser-based OIDC authentication flows.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "WebAuthentication"
    }
  ],
  "identifier" : "doc:\/\/WebAuthenticationUI\/documentation\/WebAuthenticationUI\/WebAuthentication",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "WebAuthentication"
    }
  ],
  "role" : "symbol",
  "title" : "WebAuthentication",
  "type" : "topic",
  "url" : "\/documentation\/webauthenticationui\/webauthentication"
},
"doc://WebAuthenticationUI/documentation/WebAuthenticationUI/WebAuthentication/signInFlow": {
  "abstract" : [
    {
      "text" : "The underlying OAuth2 flow that implements the authentication behavior.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "let"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "signInFlow"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10OktaOAuth221AuthorizationCodeFlowC",
      "text" : "AuthorizationCodeFlow"
    }
  ],
  "identifier" : "doc:\/\/WebAuthenticationUI\/documentation\/WebAuthenticationUI\/WebAuthentication\/signInFlow",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "signInFlow",
  "type" : "topic",
  "url" : "\/documentation\/webauthenticationui\/webauthentication\/signinflow"
}
}
}